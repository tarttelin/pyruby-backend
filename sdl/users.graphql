
extend type Query {
    me(cacheBust: String): User! @hasAuth(roles: ["user", "admin"])
    userById(id: ID!): User! @hasAuth(roles: ["admin"])
    invitationByEmailAddress(email: String!): Invitation @hasAuth(roles: ["admin"])
}

extend type Mutation {
    sendInvitation(input: InviteUser!): Invitation @hasAuth(roles: ["admin"])
    acceptInvitation(input: AcceptInvitation): Login @hasAuth(roles: ["user", "admin"])
    createUser(input: CreateUser!): User @hasAuth(roles: ["admin"])
}

input InviteUser {
    userId: ID!
    email: String!
}

input CreateUser {
    primaryEmail: String!
    fullName: String!
}

input AcceptInvitation {
    invitationId: ID!
}

type User {
    id: ID!
    fullName: String!
    primaryEmail: String!
}

type Invitation {
    id: ID!
    email: String!
    user: User!
    expiryTime: Int!
    sentBy: User
}

type UserConnection {
    items: [User!]!
    nextToken: String
}

type Login {
    uid: ID!
    user: User!
    email: String!
}